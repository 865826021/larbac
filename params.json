{"name":"Larbac","tagline":"Role based access control package for Laravel 5","body":"# LARBAC\r\n\r\nRole based access control package for Laravel 5.\r\n\r\nIntentions of this package is to apply RBAC abstraction level to promote secure user administration.\r\nAccess decisions are based on the roles and permissions individual users have as part of organization. The basic concept is that users obtain permissions by being member of role, where permissions are assigned to roles and roles assigned to users. User-role and permission-role have many-to-many relation, allowing single role have many users and single user have many roles, same applies to permissions. \r\n\r\nThis package includes frontend interface that allows: \r\n\r\n - create, edit and delete permissions\r\n - create, edit and delete roles\r\n - assign permissions to roles\r\n - assign roles to users\r\n\r\nBy default frontend option is set to `true`, if you wish to create roles and assign permissions in your own way simply turn this option off in configuration file of this package.\r\n\r\n\r\n## Requirements\r\n\r\n- [Laravel 5] (http://laravel.com/)\r\n- [illuminate/html] (https://github.com/illuminate/html)\r\n\r\n## Front-end dependency\r\n\r\n- [jQuery](http://jquery.com/) \r\n- [Bootstrap](http://getbootstrap.com/) \r\n- [Dual listbox](http://www.virtuosoft.eu/code/bootstrap-duallistbox)\r\n\r\n## Installation\r\nInstall package issuing [Composer](https://getcomposer.org/) command in terminal:\r\n\r\n```sh\r\n$ composer require alexpechkarev/larbac:dev-master\r\n```\r\n\r\nUpdate provider and aliases arrays in config/app.php with:\r\n\r\n```\r\nproviders:\r\n    ...\r\n    'Illuminate\\Html\\HtmlServiceProvider',\r\n    'Larbac\\Provider\\LarbacServiceProvider',\r\n\r\n\r\n```\r\n\r\nBefore executing migrations please review migration file located in Migration folder of this package.\r\nFour tables will be created with prefix tbl_ `[ tbl_permissions, tbl_roles, tbl_role_user, tbl_permission_role ]`\r\nPublish package assets:\r\n\r\n```\r\n    php artisan vendor:publish\r\n\r\n```\r\n\r\nPackage extends default Laravel Authentication Model by defining table relations and validation methods. \r\nUpdate config/auth.php\r\n\r\n```\r\n    #'model' => 'App\\User',\r\n    'model'  => 'Larbac\\Models\\User',\r\n```\r\n\r\nRegister package middleware with HTTP kernel route array\r\n\r\n\tprotected $routeMiddleware = [\r\n                 ...\r\n                'larbac'  => 'Larbac\\Middleware\\LarbacMiddleware.php',\r\n\t];\r\n\r\n\r\n## Config\r\n\r\nAfter publishing package assets configuration file will be located in \r\n\r\n```\r\n    config/larbac.php\r\n\r\n```\r\n\r\n## Create database tables\r\n\r\nReviewing database table names in config file and change any if necessary, than run the migration: \r\n\r\n```\r\n    php artisan migrate\r\n\r\n```\r\n\r\nBy default frontend interface set to `true`. These are default URL's:\r\n\r\n```\r\n    |   User interface can be accessed via          - http://yourdomain.net/user\r\n    |   Permission interface can be accessed via    - http://yourdomain.net/permission\r\n    |   Roles interface can be accessed via         - http://yourdomain.net/role\r\n\r\n```\r\n\r\nRoutes defined in config file and can be modified at any time.\r\n \r\n```\r\n\t'routes' => [\r\n            \r\n            'routeUser'       => 'user', \r\n            'routePermission' => 'permission', \r\n            'routeRoles'      => 'role' \r\n        ],\r\n\r\n```\r\n\r\n\r\n### Frontend interface\r\n\r\nTo inject `javascript` dependency resources into interface templates make sure that default layout template `resources/views/app.blade.php` or your own template have following section: `@section('footer-js') ... @show`.\r\n\r\n\r\n```\r\n        @section('footer-js')\r\n\t<!-- Scripts -->\r\n\t<script src=\"//cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js\"></script>\r\n\t<script src=\"//cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.1/js/bootstrap.min.js\"></script>\r\n        @show  \r\n\r\n```\r\n\r\n\r\n\r\n\r\n## Use\r\n\r\nAfter creating your permissions / roles, establishing relations between them and assigning roles to user, access restrictions can be specified within your controller:\r\n\r\n```\r\n\tpublic function __construct()\r\n\t{\r\n                // Setting role based access\r\n                $permissions = ['role'=>['Admin']  ];\r\n                \r\n\r\n                if( is_object(Request::route()) ) {\r\n                    \r\n                    Request::route()->setParameter('larbac', $permissions);\r\n                    $this->middleware('larbac');  \r\n                }\r\n\t}\r\n\r\n```\r\n\r\nVaries restriction rules can be set by specifying array of roles, array of permissions or both.\r\n\r\nValidating more than one role: \r\n - user must be assigned to one of the given roles\r\n\r\n```\r\n    $permissions = ['role'=>['Admin', 'Staff']  ];\r\n    ....\r\n\r\n```\r\n\r\nValidating more than one role along with permission:\r\n- user must be assigned to one of the given roles\r\n- at least one role must have given permission\r\n\r\n```\r\n    $permissions = ['role'=>['Admin', 'Staff'], 'permissions' => ['view']  ];\r\n    ....\r\n\r\n```\r\n\r\nValidating more than one role along with permission:\r\n- user must be assigned to one of the given roles\r\n- at least one role must have given permissions\r\n\r\n```\r\n    $permissions = ['role'=>['Admin', 'Staff'], 'permissions' => ['view', 'edit']  ];\r\n    ....\r\n\r\n```\r\n\r\nPermission based validation only:\r\n- user must have given permission\r\n\r\n```\r\n    $permissions = ['permissions' => ['edit']  ];\r\n    ....\r\n\r\n```\r\n\r\nAssigning access control in routes files:\r\n\r\n```\r\n    Route::get('/post', \r\n                        [\r\n                            'middleware' => 'larbac', \r\n                            'larbac' => [\r\n                                            'role'=>['Admin'], \r\n                                            'permissions' => ['can_save']  \r\n                                        ],\r\n        function(){\r\n     \r\n           return view('welcome');\r\n           \r\n    }]);\r\n\r\n```\r\n\r\n## Frontend screen shots\r\n\r\n### Permissions\r\n\r\nCreate new permission: /permission/create\r\n[(https://raw.githubusercontent.com/alexpechkarev/larbac/master/src/img/permission_view.png)](https://raw.githubusercontent.com/alexpechkarev/larbac/master/src/img/permission_view.png)\r\n![Screenshot](src/img/permission_create.png?raw=true \"Create new permission: http://mydomain.net/permission/create\")\r\n\r\nView permissions: /permission\r\n\r\n![Screenshot](src/img/permission_view.png?raw=true \"View roles: http://mydomain.net/permission\")\r\n\r\n\r\nEdit permission: /permission/1/edit/\r\n\r\n![Screenshot](src/img/permission_edit.png?raw=true \"Edit permission: http://mydomain.net/permission/1/edit\")\r\n\r\n\r\nDelet permission: \r\n\r\n![Screenshot](src/img/permission_delete.png?raw=true \"Delete permission\")\r\n\r\n\r\n### Roles\r\n\r\nCreate new role and assign permission: /role/create\r\n\r\n![Screenshot](src/img/role_create.png?raw=true \"Create new role: http://mydomain.net/role/create\")\r\n\r\nView roles: /role\r\n\r\n![Screenshot](src/img/role_view.png?raw=true \"View roles: http://mydomain.net/role\")\r\n\r\n\r\nEdit role: /role/1/edit/\r\n\r\n![Screenshot](src/img/role_edit.png?raw=true \"Edit role: http://mydomain.net/role/1/edit\")\r\n\r\n\r\n\r\n### Users\r\n\r\nView users: /user\r\n\r\n![Screenshot](src/img/user_view.png?raw=true \"View users: http://mydomain.net/user\")\r\n\r\n\r\nAssign role to user: /user/1/edit/\r\n\r\n![Screenshot](src/img/user_assign.png?raw=true \"Assign role to user: http://mydomain.net/user/1/edit\")\r\n\r\n\r\n## Using without frontend\r\n\r\nOut of box Laravel comes with model and controllers that handles user registration and authentication process. Here we will create roles and permissions that can be applied to those users.\r\nFirst create roles and permissions:\r\n\r\n```\r\n    /**\r\n    * Creating role\r\n    */\r\n    $role = Larbac\\Models\\Role::create(['name' => 'Admin']); // assuming role id will be 5\r\n    \r\n    // with optional role description \r\n    $role = Larbac\\Models\\Role::create(['name' => 'Admin', 'description' => 'App administrator']);\r\n\r\n    /**\r\n    * Creating permission\r\n    */\r\n    $permission = Larbac\\Models\\Permission::create(['name' => 'can_save']); // assuming permission id will be 12\r\n\r\n    // with optional permission description\r\n    $permission = Larbac\\Models\\Role::create(['name' => 'can_save', 'description' => 'Allow save changes']);\r\n\r\n```\r\n\r\nNext assign permission(s) to a Role:\r\n\r\n```\r\n    /*\r\n    * Assigning permission(s) to a role\r\n    * 'Admin' role id = 5\r\n    * 'can_save' permission id = 12\r\n    */\r\n    $role = Larbac\\Models\\Role::find(5); // find Admin role by id - 5\r\n    $role->permissions()->sync([12]); // Assign 'can_save',using permission id - 12\r\n    \r\n```    \r\n\r\n\r\nMultiply permissions can also be assigned to a Role by supplying array of permission id's.\r\nTo keep in mind that `sync( [12,13,14] )` will remove any other permissions that have been granted before and not specified in the given array.\r\n\r\n```\r\n\r\n    /**\r\n     * Assigning multiply permissions to a Role\r\n     * \r\n     * 'Admin' role id = 5\r\n     * \r\n     * 'can_save' id = 12\r\n     * 'can_view' id = 13\r\n     * 'can_edit' id = 14\r\n     */\r\n    $role = Larbac\\Models\\Role::find(1);\r\n    $role->permissions()->sync([12,13,14]);\r\n\r\n\r\n    ...\r\n\r\n    /**\r\n     * Will revoke 'can_view' id = 13 and only grant given permissions\r\n     * \r\n     * 'Admin' role id = 5\r\n     * \r\n     * 'can_save' id = 12\r\n     * 'can_edit' id = 14\r\n     */\r\n    $role->permissions()->sync( [12,14] );\r\n\r\n```\r\n\r\n\r\nNext assign a Role to an User:\r\n```\r\n\r\n    /*\r\n    * Assigning role to an user\r\n    */\r\n    $user = Larbac\\Models\\User::find(20); // assuming user id is 20\r\n    $user->roles()->sync([5]); // Assigning user [id = 20] an Admin role [id = 5]\r\n\r\n```\r\n\r\n\r\n\r\n##Support\r\n\r\nDiscovered an error or would like to suggest an improvement ? Please do email me or open an [issue on GitHub](https://github.com/alexpechkarev/larbac/issues)\r\n\r\n\r\n##License\r\n\r\nLarbac for Laravel 5 is released under the MIT License. See the bundled\r\n[LICENSE](https://github.com/alexpechkarev/larbac/blob/master/LICENSE)\r\nfile for details.","google":"UA-60566001-1","note":"Don't delete this file! It's used internally to help with page regeneration."}